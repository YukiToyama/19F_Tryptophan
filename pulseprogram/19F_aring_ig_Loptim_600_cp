; 19F_aring_yt_500_cp
; Avance version May 23, 2013

/* 

  Written by YT July 22, 2024 
  Modified from 19F_aring_ig_yt_600_cp

  Measure the NMR signal intensity with variable d1 delays as pseudo 2D.
  set vdlist (d1 is not used)
  set ds = 0
  set l8 (NDS) to be 16n (64 recommended)

  Modified from Ranjith's trick to run dummy scans for each d1 delay (taken from CH3_forbidd3Q_lek_1G_v2_cp)
  Use a simpler goto loop instead of lo to times NL otherwise extra 1 scan is accumulated.
  In the older topspin (v3.7), ippall does not work. It seems go statement does not increment the phases
  of pulses if ippx statement is used. I use ph11-14 as a dummy phase that is incremented only during the 
  dummy scan.

  Utilizing the anti-ringing triple pulse for excitation to relieve base-line distortion
  caused by acoustic ringing.
  
  Ref: Wang et al., JMR 2021 332 107067,  JBNMR 2020 74:753
  Scrambling flag is included, though seems like it is not useful to suprress receiver overflow. 
  DE needs to be a bit longer otherwise it complains receiver overflow.

  230523 scrambling flag was removed.

*/

#include <Avance.incl> 
#include <Grad.incl>
#include <Delay.incl>


;Define phases
#define zero ph=0.0
#define one ph=90.0
#define two ph=180.0
#define three ph=270.0

"d11=30m"
"d12=20u"

;Define pulses
define pulse pwh

"pwh=p1"                /* 19F hard pulse at power level pl1 (tpwr) */

/* Assign cnsts to check validity of parameter range */

 "cnst12 = plw12"  ; power level for 19F scrambling pulse
"acqt0=-pwh*2.0/PI"

; Define delays

define list<delay> interscandelay = <$VDLIST>
"l2=0" ; Pointer of interscandelay

; Define loop counters

define loopcounter NDS    ; number of dummy scans - recommend 64
   "NDS = l8"
define loopcounter dsdone  
   "dsdone = NDS"

/* BEGIN ACTUAL PULSE SEQUENCE */

1 ze
 
if "cnst12 > 4.0"
  {
   2u
   print "error: power level for 1H locking is too large < 4W"
   goto HaltAcqu
  }

if "ds != 0"
  {
   2u
   print "error: set ds to 0"
   goto HaltAcqu
  }


  d11 pl12:f2

; This is the real start 

2 d11 
  "dsdone = NDS" ; reset dsdone counter 
3 d11 do:f2
  d12 pl1:f1              ; obspower(tpwr)  Set power for hard pulses  

  "DELTA=interscandelay[l2]-d11-d12"

  DELTA                  ; interscan delay

/* dummy scan loop - using an approach developed by RM */
   if "dsdone  > 0" {

     (pwh ph11):f1          ;rgpulse(pw,zero,1.0e-6,0.0)
     (pwh ph12):f1          ;rgpulse(pw,zero,1.0e-6,0.0)
     (pwh ph13):f1          ;rgpulse(pw,zero,1.0e-6,0.0)

     "DELTA= aq"
     DELTA cpds2:f2
     2u do:f2

     "dsdone=dsdone-1"
     2u ipp11 ipp12 ipp13 ; NDS must be a multiple of phase cycling steps
     goto 3
  }

  (pwh ph1):f1          ;rgpulse(pw,zero,1.0e-6,0.0)
  (pwh ph2):f1          ;rgpulse(pw,zero,1.0e-6,0.0)
  (pwh ph3):f1          ;rgpulse(pw,zero,1.0e-6,0.0)

/* acquire data */
 go=3 ph31  cpds2:f2
 d11 do:f2 mc #0 to 2 F0(zd)

 F1QF(calclc(l2, 1))
 

HaltAcqu, 1m
exit

ph1=0 2 0 2 0 2 0 2 1 3 1 3 1 3 1 3 
ph2=2 2 0 0 2 2 0 0 3 3 1 1 3 3 1 1 
ph3=0 0 0 0 2 2 2 2 1 1 1 1 3 3 3 3

ph11=0 2 0 2 0 2 0 2 1 3 1 3 1 3 1 3 
ph12=2 2 0 0 2 2 0 0 3 3 1 1 3 3 1 1 
ph13=0 0 0 0 2 2 2 2 1 1 1 1 3 3 3 3

ph31=0 2 2 0 2 0 0 2 1 3 3 1 3 1 1 3



;pl1 : tpwr - power level for pwh
;pl12 : power level for 1H decoupling on f2 channel
;pl21 : dpwr - power level for  13C decoupling cpd2
;pl31 : dpwr2 - power level for 15N cpd3
;p1 : pwh
;d11 : delay for disk i/o, 30ms
;d17 : delay for 19F scrambling - set to 40 ms
;cpd2: decoupling according to sequence defined by cpdprg2
;pcpd2: f2 channel - 90 degree pulse for decoupling sequence
;l8 : NDS - number of dummy scans - must be set to 16n (32 or 64 recommended)
;ns : 16n
;ds : set ds to 0 - this is done internal to the program
;zgoptns : 